#!/usr/bin/env node
import { spawn } from 'node:child_process';
import { platform, arch } from 'node:process';
import { fileURLToPath } from 'node:url';
import { dirname, join } from 'node:path';
import { existsSync } from 'node:fs';

const __dirname = dirname(fileURLToPath(import.meta.url));
const triples = {
  'darwin-arm64': 'darwin-arm64',
  'darwin-x64': 'darwin-x64',
  'linux-x64': 'linux-x64',
  'linux-arm64': 'linux-arm64',
  'win32-x64': 'windows-x64',
  'win32-arm64': 'windows-arm64',
};
const key = `${platform}-${arch}`;
const triple = triples[key];
if (!triple) {
  console.error(`Unsupported platform/arch: ${key}`);
  process.exit(1);
}
const exe = platform === 'win32' ? `hotbox-${triple}.exe` : `hotbox-${triple}`;
const bin = join(__dirname, 'vendor', exe);
if (!existsSync(bin)) {
  console.error(`hotbox binary missing: ${bin}. Reinstall the package to fetch prebuilts.`);
  process.exit(1);
}
const p = spawn(bin, process.argv.slice(2), { stdio: 'inherit' });
p.on('close', (code) => process.exit(code ?? 0));
